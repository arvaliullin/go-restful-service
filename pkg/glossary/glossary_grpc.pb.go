// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.1
// source: glossary.proto

package glossary

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	GlossaryService_GetAllTerms_FullMethodName   = "/glossary.GlossaryService/GetAllTerms"
	GlossaryService_GetTermByTerm_FullMethodName = "/glossary.GlossaryService/GetTermByTerm"
	GlossaryService_CreateTerm_FullMethodName    = "/glossary.GlossaryService/CreateTerm"
	GlossaryService_UpdateTerm_FullMethodName    = "/glossary.GlossaryService/UpdateTerm"
	GlossaryService_DeleteTerm_FullMethodName    = "/glossary.GlossaryService/DeleteTerm"
)

// GlossaryServiceClient is the client API for GlossaryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GlossaryServiceClient interface {
	GetAllTerms(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GlossaryTerms, error)
	GetTermByTerm(ctx context.Context, in *GlossaryTermRequest, opts ...grpc.CallOption) (*GlossaryTerm, error)
	CreateTerm(ctx context.Context, in *GlossaryTerm, opts ...grpc.CallOption) (*GlossaryTerm, error)
	UpdateTerm(ctx context.Context, in *GlossaryTerm, opts ...grpc.CallOption) (*GlossaryTerm, error)
	DeleteTerm(ctx context.Context, in *GlossaryTermRequest, opts ...grpc.CallOption) (*Status, error)
}

type glossaryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGlossaryServiceClient(cc grpc.ClientConnInterface) GlossaryServiceClient {
	return &glossaryServiceClient{cc}
}

func (c *glossaryServiceClient) GetAllTerms(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GlossaryTerms, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GlossaryTerms)
	err := c.cc.Invoke(ctx, GlossaryService_GetAllTerms_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *glossaryServiceClient) GetTermByTerm(ctx context.Context, in *GlossaryTermRequest, opts ...grpc.CallOption) (*GlossaryTerm, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GlossaryTerm)
	err := c.cc.Invoke(ctx, GlossaryService_GetTermByTerm_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *glossaryServiceClient) CreateTerm(ctx context.Context, in *GlossaryTerm, opts ...grpc.CallOption) (*GlossaryTerm, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GlossaryTerm)
	err := c.cc.Invoke(ctx, GlossaryService_CreateTerm_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *glossaryServiceClient) UpdateTerm(ctx context.Context, in *GlossaryTerm, opts ...grpc.CallOption) (*GlossaryTerm, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GlossaryTerm)
	err := c.cc.Invoke(ctx, GlossaryService_UpdateTerm_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *glossaryServiceClient) DeleteTerm(ctx context.Context, in *GlossaryTermRequest, opts ...grpc.CallOption) (*Status, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Status)
	err := c.cc.Invoke(ctx, GlossaryService_DeleteTerm_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GlossaryServiceServer is the server API for GlossaryService service.
// All implementations must embed UnimplementedGlossaryServiceServer
// for forward compatibility.
type GlossaryServiceServer interface {
	GetAllTerms(context.Context, *Empty) (*GlossaryTerms, error)
	GetTermByTerm(context.Context, *GlossaryTermRequest) (*GlossaryTerm, error)
	CreateTerm(context.Context, *GlossaryTerm) (*GlossaryTerm, error)
	UpdateTerm(context.Context, *GlossaryTerm) (*GlossaryTerm, error)
	DeleteTerm(context.Context, *GlossaryTermRequest) (*Status, error)
	mustEmbedUnimplementedGlossaryServiceServer()
}

// UnimplementedGlossaryServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGlossaryServiceServer struct{}

func (UnimplementedGlossaryServiceServer) GetAllTerms(context.Context, *Empty) (*GlossaryTerms, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllTerms not implemented")
}
func (UnimplementedGlossaryServiceServer) GetTermByTerm(context.Context, *GlossaryTermRequest) (*GlossaryTerm, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTermByTerm not implemented")
}
func (UnimplementedGlossaryServiceServer) CreateTerm(context.Context, *GlossaryTerm) (*GlossaryTerm, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTerm not implemented")
}
func (UnimplementedGlossaryServiceServer) UpdateTerm(context.Context, *GlossaryTerm) (*GlossaryTerm, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTerm not implemented")
}
func (UnimplementedGlossaryServiceServer) DeleteTerm(context.Context, *GlossaryTermRequest) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTerm not implemented")
}
func (UnimplementedGlossaryServiceServer) mustEmbedUnimplementedGlossaryServiceServer() {}
func (UnimplementedGlossaryServiceServer) testEmbeddedByValue()                         {}

// UnsafeGlossaryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GlossaryServiceServer will
// result in compilation errors.
type UnsafeGlossaryServiceServer interface {
	mustEmbedUnimplementedGlossaryServiceServer()
}

func RegisterGlossaryServiceServer(s grpc.ServiceRegistrar, srv GlossaryServiceServer) {
	// If the following call pancis, it indicates UnimplementedGlossaryServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&GlossaryService_ServiceDesc, srv)
}

func _GlossaryService_GetAllTerms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlossaryServiceServer).GetAllTerms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GlossaryService_GetAllTerms_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlossaryServiceServer).GetAllTerms(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _GlossaryService_GetTermByTerm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GlossaryTermRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlossaryServiceServer).GetTermByTerm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GlossaryService_GetTermByTerm_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlossaryServiceServer).GetTermByTerm(ctx, req.(*GlossaryTermRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GlossaryService_CreateTerm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GlossaryTerm)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlossaryServiceServer).CreateTerm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GlossaryService_CreateTerm_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlossaryServiceServer).CreateTerm(ctx, req.(*GlossaryTerm))
	}
	return interceptor(ctx, in, info, handler)
}

func _GlossaryService_UpdateTerm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GlossaryTerm)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlossaryServiceServer).UpdateTerm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GlossaryService_UpdateTerm_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlossaryServiceServer).UpdateTerm(ctx, req.(*GlossaryTerm))
	}
	return interceptor(ctx, in, info, handler)
}

func _GlossaryService_DeleteTerm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GlossaryTermRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlossaryServiceServer).DeleteTerm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GlossaryService_DeleteTerm_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlossaryServiceServer).DeleteTerm(ctx, req.(*GlossaryTermRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GlossaryService_ServiceDesc is the grpc.ServiceDesc for GlossaryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GlossaryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "glossary.GlossaryService",
	HandlerType: (*GlossaryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAllTerms",
			Handler:    _GlossaryService_GetAllTerms_Handler,
		},
		{
			MethodName: "GetTermByTerm",
			Handler:    _GlossaryService_GetTermByTerm_Handler,
		},
		{
			MethodName: "CreateTerm",
			Handler:    _GlossaryService_CreateTerm_Handler,
		},
		{
			MethodName: "UpdateTerm",
			Handler:    _GlossaryService_UpdateTerm_Handler,
		},
		{
			MethodName: "DeleteTerm",
			Handler:    _GlossaryService_DeleteTerm_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "glossary.proto",
}
